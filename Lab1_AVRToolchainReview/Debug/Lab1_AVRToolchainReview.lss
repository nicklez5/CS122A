
Lab1_AVRToolchainReview.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000039c  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  00000434  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6f  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  0000119b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bf  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000512  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  00002652  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000028cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a9 c0       	rjmp	.+338    	; 0x188 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	55 d1       	rcall	.+682    	; 0x36e <main>
  c4:	69 c1       	rjmp	.+722    	; 0x398 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
}
void TimerOff(){
	TCCR1B = 0x00;
}
void TimerISR(){
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	2e 98       	cbi	0x05, 6	; 5
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	2f 9a       	sbi	0x05, 7	; 5
  f4:	00 00       	nop
  f6:	2f 98       	cbi	0x05, 7	; 5
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_init>:
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 df       	rcall	.-62     	; 0xc8 <delay_ms>
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	f2 df       	rcall	.-28     	; 0xee <LCD_WriteCommand>
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	f0 df       	rcall	.-32     	; 0xee <LCD_WriteCommand>
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	ee df       	rcall	.-36     	; 0xee <LCD_WriteCommand>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	ec df       	rcall	.-40     	; 0xee <LCD_WriteCommand>
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 cf       	rjmp	.-84     	; 0xc8 <delay_ms>
 11c:	08 95       	ret

0000011e <LCD_WriteData>:
 11e:	2e 9a       	sbi	0x05, 6	; 5
 120:	8b b9       	out	0x0b, r24	; 11
 122:	2f 9a       	sbi	0x05, 7	; 5
 124:	00 00       	nop
 126:	2f 98       	cbi	0x05, 7	; 5
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	cd cf       	rjmp	.-102    	; 0xc8 <delay_ms>
 12e:	08 95       	ret

00000130 <LCD_Cursor>:
 130:	81 31       	cpi	r24, 0x11	; 17
 132:	18 f4       	brcc	.+6      	; 0x13a <LCD_Cursor+0xa>
 134:	81 58       	subi	r24, 0x81	; 129
 136:	db cf       	rjmp	.-74     	; 0xee <LCD_WriteCommand>
 138:	08 95       	ret
 13a:	81 55       	subi	r24, 0x51	; 81
 13c:	d8 cf       	rjmp	.-80     	; 0xee <LCD_WriteCommand>
 13e:	08 95       	ret

00000140 <TimerOn>:
 140:	8b e0       	ldi	r24, 0x0B	; 11
 142:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 146:	8d e7       	ldi	r24, 0x7D	; 125
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 14e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 158:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 15c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 164:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 168:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 16c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 170:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 174:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 178:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 17c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 180:	8f b7       	in	r24, 0x3f	; 63
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8f bf       	out	0x3f, r24	; 63
 186:	08 95       	ret

00000188 <__vector_13>:
}
ISR(TIMER1_COMPA_vect){
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 19a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 19e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 1a2:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 1a6:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	a1 09       	sbc	r26, r1
 1ae:	b1 09       	sbc	r27, r1
 1b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 1b4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 1b8:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1bc:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0){
 1c0:	89 2b       	or	r24, r25
 1c2:	8a 2b       	or	r24, r26
 1c4:	8b 2b       	or	r24, r27
 1c6:	99 f4       	brne	.+38     	; 0x1ee <__vector_13+0x66>
}
void TimerOff(){
	TCCR1B = 0x00;
}
void TimerISR(){
	TimerFlag = 1;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <TimerFlag>
}
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 1ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1d6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1da:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1de:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 1e2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 1e6:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1ea:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <TimerSet>:
void TimerSet(unsigned long M){
	_avr_timer_M = M;
 200:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 204:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 208:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 20c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 210:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <_avr_timer_cntcurr>
 214:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <_avr_timer_cntcurr+0x1>
 218:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr+0x2>
 21c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x3>
 220:	08 95       	ret

00000222 <tick>:
unsigned char _score = 0;
unsigned char real_score = 0;
void tick(){
	
	//Transitions
	switch(state){
 222:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	59 f1       	breq	.+86     	; 0x280 <tick+0x5e>
 22a:	28 f4       	brcc	.+10     	; 0x236 <tick+0x14>
 22c:	88 23       	and	r24, r24
 22e:	49 f0       	breq	.+18     	; 0x242 <tick+0x20>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	59 f0       	breq	.+22     	; 0x24a <tick+0x28>
 234:	6b c0       	rjmp	.+214    	; 0x30c <tick+0xea>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	e9 f1       	breq	.+122    	; 0x2b4 <tick+0x92>
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	09 f4       	brne	.+2      	; 0x240 <tick+0x1e>
 23e:	50 c0       	rjmp	.+160    	; 0x2e0 <tick+0xbe>
 240:	65 c0       	rjmp	.+202    	; 0x30c <tick+0xea>
		case Init:
			state = led_0;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
			break;
 248:	8a c0       	rjmp	.+276    	; 0x35e <tick+0x13c>
		
		case led_0:
			if(~PINA & 0x01){
 24a:	00 99       	sbic	0x00, 0	; 0
 24c:	0b c0       	rjmp	.+22     	; 0x264 <tick+0x42>
				
				if(real_score > 0){
 24e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 252:	88 23       	and	r24, r24
 254:	19 f0       	breq	.+6      	; 0x25c <tick+0x3a>
					real_score -= 1;
 256:	81 50       	subi	r24, 0x01	; 1
 258:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
				}
				state = led_3;
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				break;
 262:	78 c0       	rjmp	.+240    	; 0x354 <tick+0x132>
			}
			_score += 1;
 264:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_score>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_score>
			state = led_1;
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state>
				_score = 0;
				break;
			}
			break;
		case led_1:
			tmpb = 0x02;
 274:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <tmpb>
			if(_score == 2){
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	09 f0       	breq	.+2      	; 0x27e <tick+0x5c>
 27c:	5b c0       	rjmp	.+182    	; 0x334 <tick+0x112>
 27e:	4f c0       	rjmp	.+158    	; 0x31e <tick+0xfc>
			_score += 1;
			state = led_1;
			break;
		
		case led_1:
			if(~PINA & 0x01){
 280:	00 99       	sbic	0x00, 0	; 0
 282:	09 c0       	rjmp	.+18     	; 0x296 <tick+0x74>
				state = led_3;
 284:	84 e0       	ldi	r24, 0x04	; 4
 286:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				real_score += 1;
 28a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
				break;
 294:	5f c0       	rjmp	.+190    	; 0x354 <tick+0x132>
			}
			_score += 1;
 296:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_score>
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_score>
			state = led_2;
 2a0:	93 e0       	ldi	r25, 0x03	; 3
 2a2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state>
				_score = 0;
				break;
			}
			break;
		case led_2:
			tmpb = 0x04;
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <tmpb>
			if(_score == 2){
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <tick+0x90>
 2b0:	41 c0       	rjmp	.+130    	; 0x334 <tick+0x112>
 2b2:	3b c0       	rjmp	.+118    	; 0x32a <tick+0x108>
			_score += 1;
			state = led_2;
			break;
		
		case led_2:
			if(~PINA & 0x01){
 2b4:	00 99       	sbic	0x00, 0	; 0
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <tick+0xac>
				if(real_score > 0){
 2b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2bc:	88 23       	and	r24, r24
 2be:	19 f0       	breq	.+6      	; 0x2c6 <tick+0xa4>
					real_score -= 1;
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
				}
				state = led_3;
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				break;
 2cc:	43 c0       	rjmp	.+134    	; 0x354 <tick+0x132>
			}
			_score += 1;
 2ce:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_score>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_score>
			state = led_0;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
			break;
 2de:	3f c0       	rjmp	.+126    	; 0x35e <tick+0x13c>
		case led_3:		
			if(~PINA & 0x01){
 2e0:	00 99       	sbic	0x00, 0	; 0
 2e2:	0b c0       	rjmp	.+22     	; 0x2fa <tick+0xd8>
				if(real_score > 0){
 2e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2e8:	88 23       	and	r24, r24
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <tick+0xd0>
					real_score -= 1;
 2ec:	81 50       	subi	r24, 0x01	; 1
 2ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
				}
				state = led_3;
 2f2:	84 e0       	ldi	r24, 0x04	; 4
 2f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				break;
 2f8:	2d c0       	rjmp	.+90     	; 0x354 <tick+0x132>
			}
			_score += 1;
 2fa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_score>
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_score>
			state = led_0;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
			break;
 30a:	29 c0       	rjmp	.+82     	; 0x35e <tick+0x13c>
		default:
			state = Init;
 30c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state>
 310:	11 c0       	rjmp	.+34     	; 0x334 <tick+0x112>
	//State actions
	switch(state){
		case led_0:
			tmpb = 0x01;
			if(_score == 2){
				tmpb = 0x09;
 312:	89 e0       	ldi	r24, 0x09	; 9
 314:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpb>
				_score = 0;
 318:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_score>
				break;
 31c:	0b c0       	rjmp	.+22     	; 0x334 <tick+0x112>
			}
			break;
		case led_1:
			tmpb = 0x02;
			if(_score == 2){
				tmpb = 0xA;
 31e:	8a e0       	ldi	r24, 0x0A	; 10
 320:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpb>
				_score = 0;
 324:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_score>
				break;
 328:	05 c0       	rjmp	.+10     	; 0x334 <tick+0x112>
			}
			break;
		case led_2:
			tmpb = 0x04;
			if(_score == 2){
				tmpb = 0xC;
 32a:	8c e0       	ldi	r24, 0x0C	; 12
 32c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpb>
				_score = 0;
 330:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_score>
			_score = 0;
			break;
		default:
			break;
	}
	PORTB = tmpb;
 334:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tmpb>
 338:	85 b9       	out	0x05, r24	; 5
	if(real_score < 9){
 33a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 33e:	89 30       	cpi	r24, 0x09	; 9
 340:	28 f4       	brcc	.+10     	; 0x34c <tick+0x12a>
		LCD_WriteData(real_score + '0');
 342:	80 5d       	subi	r24, 0xD0	; 208
 344:	ec de       	rcall	.-552    	; 0x11e <LCD_WriteData>
		LCD_Cursor(0);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	f3 ce       	rjmp	.-538    	; 0x130 <LCD_Cursor>
	}else{
		LCD_WriteData(real_score);
 34a:	08 95       	ret
		LCD_Cursor(0);
 34c:	e8 de       	rcall	.-560    	; 0x11e <LCD_WriteData>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	ef ce       	rjmp	.-546    	; 0x130 <LCD_Cursor>
	}

	
};
 352:	08 95       	ret
				_score = 0;
				break;
			}
			break;	
		case led_3:
			tmpb = 0x00;
 354:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tmpb>
			_score = 0;
 358:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_score>
			break;
 35c:	eb cf       	rjmp	.-42     	; 0x334 <tick+0x112>
	}
	
	//State actions
	switch(state){
		case led_0:
			tmpb = 0x01;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpb>
			if(_score == 2){
 364:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_score>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	21 f7       	brne	.-56     	; 0x334 <tick+0x112>
 36c:	d2 cf       	rjmp	.-92     	; 0x312 <tick+0xf0>

0000036e <main>:
	
};

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 36e:	11 b8       	out	0x01, r1	; 1
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 374:	84 b9       	out	0x04, r24	; 4
 376:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 378:	8a b9       	out	0x0a, r24	; 10
 37a:	1b b8       	out	0x0b, r1	; 11
	LCD_init();
 37c:	c1 de       	rcall	.-638    	; 0x100 <LCD_init>
	//LCD_DisplayString(1,"0");
	TimerSet(500);
 37e:	64 ef       	ldi	r22, 0xF4	; 244
 380:	71 e0       	ldi	r23, 0x01	; 1
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 386:	3c df       	rcall	.-392    	; 0x200 <TimerSet>
	state = Init;
 388:	db de       	rcall	.-586    	; 0x140 <TimerOn>
 38a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state>
	while(1){
		tick();
		delay_ms(250);
 38e:	49 df       	rcall	.-366    	; 0x222 <tick>
 390:	8a ef       	ldi	r24, 0xFA	; 250
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	99 de       	rcall	.-718    	; 0xc8 <delay_ms>
 396:	fb cf       	rjmp	.-10     	; 0x38e <main+0x20>

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
