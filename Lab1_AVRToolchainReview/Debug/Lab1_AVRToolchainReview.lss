
Lab1_AVRToolchainReview.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002bc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b1  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085e  00000000  00000000  00000dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f5  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049a  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e5 d0       	rcall	.+458    	; 0x28e <main>
  c4:	f9 c0       	rjmp	.+498    	; 0x2b8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
}
void TimerOff(){
	TCCR1B = 0x00;
}
void TimerISR(){
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
  fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 100:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 104:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}
ISR(TIMER1_COMPA_vect){
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 122:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 126:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 13c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 140:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 144:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0){
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
}
void TimerOff(){
	TCCR1B = 0x00;
}
void TimerISR(){
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
}
ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 16a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 172:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:
void TimerSet(unsigned long M){
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_cntcurr>
 19c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <tick>:
enum States{Init,led_0,led_1,led_2,led_3} state;
unsigned char _score = 0;
void tick(){
	
	//Transitions
	switch(state){
 1aa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	11 f1       	breq	.+68     	; 0x1f6 <tick+0x4c>
 1b2:	28 f4       	brcc	.+10     	; 0x1be <tick+0x14>
 1b4:	88 23       	and	r24, r24
 1b6:	41 f0       	breq	.+16     	; 0x1c8 <tick+0x1e>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	51 f0       	breq	.+20     	; 0x1d0 <tick+0x26>
 1bc:	40 c0       	rjmp	.+128    	; 0x23e <tick+0x94>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	71 f1       	breq	.+92     	; 0x21e <tick+0x74>
 1c2:	84 30       	cpi	r24, 0x04	; 4
 1c4:	b1 f1       	breq	.+108    	; 0x232 <tick+0x88>
 1c6:	3b c0       	rjmp	.+118    	; 0x23e <tick+0x94>
		case Init:
			state = led_0;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
 1ce:	54 c0       	rjmp	.+168    	; 0x278 <tick+0xce>
		
		case led_0:
			if(~PINA & 0x01){
 1d0:	00 99       	sbic	0x00, 0	; 0
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <tick+0x32>
				state = led_3;
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
				break;
 1da:	49 c0       	rjmp	.+146    	; 0x26e <tick+0xc4>
			}
			state = led_1;
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
				_score = 0;
				break;
			}
			break;
		case led_1:
			tmpb = 0x02;
 1e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpb>
			_score += 1;
 1e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			if(_score == 2){
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	c9 f5       	brne	.+114    	; 0x266 <tick+0xbc>
 1f4:	2d c0       	rjmp	.+90     	; 0x250 <tick+0xa6>
			}
			state = led_1;
			break;
		
		case led_1:
			if(~PINA & 0x01){
 1f6:	00 99       	sbic	0x00, 0	; 0
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <tick+0x58>
				state = led_3;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
				break;
 200:	36 c0       	rjmp	.+108    	; 0x26e <tick+0xc4>
			}
			state = led_2;
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
				_score = 0;
				break;
			}
			break;
		case led_2:
			tmpb = 0x04;
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpb>
			_score += 1;
 20e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			if(_score == 2){
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	29 f5       	brne	.+74     	; 0x266 <tick+0xbc>
 21c:	1f c0       	rjmp	.+62     	; 0x25c <tick+0xb2>
			}
			state = led_2;
			break;
		
		case led_2:
			if(~PINA & 0x01){
 21e:	00 99       	sbic	0x00, 0	; 0
 220:	04 c0       	rjmp	.+8      	; 0x22a <tick+0x80>
				state = led_3;
 222:	84 e0       	ldi	r24, 0x04	; 4
 224:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
				break;
 228:	22 c0       	rjmp	.+68     	; 0x26e <tick+0xc4>
			}
			state = led_0;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
 230:	23 c0       	rjmp	.+70     	; 0x278 <tick+0xce>
		case led_3:		
			if(~PINA & 0x01){
 232:	00 9b       	sbis	0x00, 0	; 0
 234:	1c c0       	rjmp	.+56     	; 0x26e <tick+0xc4>
				state = led_3;
				break;
			}else{
				state = led_0;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
				break;
 23c:	1d c0       	rjmp	.+58     	; 0x278 <tick+0xce>
			}
		default:
			state = Init;
 23e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
 242:	11 c0       	rjmp	.+34     	; 0x266 <tick+0xbc>
	switch(state){
		case led_0:
			tmpb = 0x01;
			_score += 1;
			if(_score == 2){
				tmpb = 0x09;
 244:	89 e0       	ldi	r24, 0x09	; 9
 246:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpb>
				_score = 0;
 24a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				break;
 24e:	0b c0       	rjmp	.+22     	; 0x266 <tick+0xbc>
			break;
		case led_1:
			tmpb = 0x02;
			_score += 1;
			if(_score == 2){
				tmpb = 0xA;
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpb>
				_score = 0;
 256:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				break;
 25a:	05 c0       	rjmp	.+10     	; 0x266 <tick+0xbc>
			break;
		case led_2:
			tmpb = 0x04;
			_score += 1;
			if(_score == 2){
				tmpb = 0xC;
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpb>
				_score = 0;
 262:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			_score = 0;
			break;
		default:
			break;
	}
	PORTB = tmpb;
 266:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tmpb>
 26a:	85 b9       	out	0x05, r24	; 5

	
};
 26c:	08 95       	ret
				_score = 0;
				break;
			}
			break;	
		case led_3:
			tmpb = 0x00;
 26e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tmpb>
			_score = 0;
 272:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			break;
 276:	f7 cf       	rjmp	.-18     	; 0x266 <tick+0xbc>
	}
	
	//State actions
	switch(state){
		case led_0:
			tmpb = 0x01;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpb>
			_score += 1;
 27e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			if(_score == 2){
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	69 f7       	brne	.-38     	; 0x266 <tick+0xbc>
 28c:	db cf       	rjmp	.-74     	; 0x244 <tick+0x9a>

0000028e <main>:
	
};

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 28e:	11 b8       	out	0x01, r1	; 1
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 294:	84 b9       	out	0x04, r24	; 4
 296:	15 b8       	out	0x05, r1	; 5
	TimerSet(500);
 298:	64 ef       	ldi	r22, 0xF4	; 244
 29a:	71 e0       	ldi	r23, 0x01	; 1
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	73 df       	rcall	.-282    	; 0x188 <TimerSet>
	TimerOn();
 2a2:	12 df       	rcall	.-476    	; 0xc8 <TimerOn>
 2a4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
	state = Init;
	while(1){
		tick();
 2a8:	80 df       	rcall	.-256    	; 0x1aa <tick>
 2aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
		while(!TimerFlag);
 2ae:	88 23       	and	r24, r24
 2b0:	e1 f3       	breq	.-8      	; 0x2aa <main+0x1c>
 2b2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TimerFlag>
		TimerFlag = 0;
 2b6:	f8 cf       	rjmp	.-16     	; 0x2a8 <main+0x1a>

000002b8 <_exit>:
	}
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
